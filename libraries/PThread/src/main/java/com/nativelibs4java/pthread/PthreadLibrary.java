package com.nativelibs4java.pthread;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.SizeT;
import org.bridj.TypedPointer;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
import org.bridj.util.DefaultParameterizedType;
/**
 * Wrapper for library <b>pthread</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("pthread") 
@Runtime(CRuntime.class) 
public class PthreadLibrary {
	static {
		BridJ.register();
	}
	/** <i>native declaration : /usr/include/pthread.h</i> */
	public static final int PTHREAD_PROCESS_SHARED = (int)1;
	/** <i>native declaration : /usr/include/Availability.h</i> */
	public static final int __IPHONE_4_0 = (int)40000;
	/** <i>native declaration : /usr/include/pthread.h</i> */
	public static final int PTHREAD_MUTEX_RECURSIVE = (int)2;
	/** <i>native declaration : /usr/include/_types.h</i> */
	public static final int __DARWIN_WCHAR_MAX = (int)0x7fffffff;
	/** <i>native declaration : /usr/include/Availability.h</i> */
	public static final int __IPHONE_4_3 = (int)40300;
	/** <i>native declaration : /usr/include/pthread_impl.h</i> */
	public static final int SCHED_RR = (int)2;
	/** <i>native declaration : /usr/include/Availability.h</i> */
	public static final int __IPHONE_4_1 = (int)40100;
	/** <i>native declaration : /usr/include/Availability.h</i> */
	public static final int __IPHONE_4_2 = (int)40200;
	/** <i>native declaration : /usr/include/pthread.h</i> */
	public static final int PTHREAD_SCOPE_SYSTEM = (int)1;
	/** <i>native declaration : /usr/include/pthread.h</i> */
	public static final int PTHREAD_MUTEX_ERRORCHECK = (int)1;
	/** <i>native declaration : /usr/include/pthread_impl.h</i> */
	public static final int _PTHREAD_ONCE_SIG_init = (int)0x30B1BCBA;
	/**
	 * define<br>
	 * Conversion Error : { 0x30B1BCBA, { 0 } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/pthread.h:0</i><br>
	 * { 0x30B1BCBA, { 0 } }
	 */
	/** <i>native declaration : /usr/include/Availability.h</i> */
	public static final int __MAC_NA = (int)9999;
	/** <i>native declaration : /usr/include/pthread.h</i> */
	public static final int PTHREAD_PRIO_INHERIT = (int)1;
	/** <i>native declaration : /usr/include/pthread.h</i> */
	public static final int PTHREAD_PROCESS_PRIVATE = (int)2;
	/** <i>native declaration : /usr/include/pthread_impl.h</i> */
	public static final int _PTHREAD_FIRSTFIT_MUTEX_SIG_init = (int)0x32AAABA3;
	/** <i>native declaration : /usr/include/pthread_impl.h</i> */
	public static final int __SCHED_PARAM_SIZE__ = (int)4;
	/** <i>native declaration : /usr/include/Availability.h</i> */
	public static final int __MAC_10_3 = (int)1030;
	/** <i>native declaration : /usr/include/pthread_impl.h</i> */
	public static final int _PTHREAD_RECURSIVE_MUTEX_SIG_init = (int)0x32AAABA2;
	/** <i>native declaration : /usr/include/Availability.h</i> */
	public static final int __MAC_10_2 = (int)1020;
	/** <i>native declaration : /usr/include/Availability.h</i> */
	public static final int __MAC_10_1 = (int)1010;
	/** <i>native declaration : /usr/include/Availability.h</i> */
	public static final int __MAC_10_0 = (int)1000;
	/** <i>native declaration : /usr/include/Availability.h</i> */
	public static final int __MAC_10_7 = (int)1070;
	/** <i>native declaration : /usr/include/pthread.h</i> */
	public static final int PTHREAD_INHERIT_SCHED = (int)1;
	/** <i>native declaration : /usr/include/Availability.h</i> */
	public static final int __MAC_10_6 = (int)1060;
	/** <i>native declaration : /usr/include/Availability.h</i> */
	public static final int __MAC_10_5 = (int)1050;
	/** <i>native declaration : /usr/include/Availability.h</i> */
	public static final int __MAC_10_4 = (int)1040;
	/** <i>native declaration : /usr/include/_types.h</i> */
	public static final int _FORTIFY_SOURCE = (int)2;
	/** <i>native declaration : /usr/include/Availability.h</i> */
	public static final int __MAC_10_8 = (int)1080;
	/** <i>native declaration : /usr/include/pthread.h</i> */
	public static final int PTHREAD_MUTEX_NORMAL = (int)0;
	/** <i>native declaration : /usr/include/time.h</i> */
	public static final int CLOCKS_PER_SEC = (int)1000000;
	/** <i>native declaration : /usr/include/pthread.h</i> */
	public static final Pointer<? > PTHREAD_CANCELED = (Pointer<? >)(Pointer.pointerToAddress(1));
	/**
	 * define<br>
	 * Conversion Error : { 0x3CB0B1BB, { 0 } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/pthread.h:0</i><br>
	 * { 0x3CB0B1BB, { 0 } }
	 */
	/** <i>native declaration : /usr/include/pthread.h</i> */
	public static final int PTHREAD_MUTEX_DEFAULT = (int)0;
	/** <i>native declaration : /usr/include/pthread.h</i> */
	public static final int PTHREAD_CANCEL_DISABLE = (int)0x00;
	/** <i>native declaration : /usr/include/pthread.h</i> */
	public static final int PTHREAD_PRIO_PROTECT = (int)2;
	/** <i>native declaration : /usr/include/pthread.h</i> */
	public static final int PTHREAD_CANCEL_ENABLE = (int)0x01;
	/** <i>native declaration : /usr/include/Availability.h</i> */
	public static final int __IPHONE_NA = (int)99999;
	/** <i>native declaration : /usr/include/pthread.h</i> */
	public static final int PTHREAD_EXPLICIT_SCHED = (int)2;
	/** <i>native declaration : /usr/include/pthread.h</i> */
	public static final int PTHREAD_CANCEL_ASYNCHRONOUS = (int)0x00;
	/** <i>native declaration : /usr/include/time.h</i> */
	public static final int NULL = (int)0;
	/** <i>native declaration : /usr/include/pthread.h</i> */
	public static final int PTHREAD_SCOPE_PROCESS = (int)2;
	/** <i>native declaration : /usr/include/pthread.h</i> */
	public static final int PTHREAD_CREATE_JOINABLE = (int)1;
	/** <i>native declaration : /usr/include/_types.h</i> */
	public static final int __DARWIN_WCHAR_MIN = (int)(0x7fffffff - 1);
	/** <i>native declaration : /usr/include/Availability.h</i> */
	public static final int __IPHONE_2_0 = (int)20000;
	/** <i>native declaration : /usr/include/Availability.h</i> */
	public static final int __IPHONE_2_1 = (int)20100;
	/** <i>native declaration : /usr/include/Availability.h</i> */
	public static final int __IPHONE_2_2 = (int)20200;
	/** <i>native declaration : /usr/include/pthread_impl.h</i> */
	public static final int _PTHREAD_COND_SIG_init = (int)0x3CB0B1BB;
	/** <i>native declaration : /usr/include/pthread.h</i> */
	public static final int PTHREAD_PRIO_NONE = (int)0;
	/** <i>native declaration : /usr/include/pthread.h</i> */
	public static final int PTHREAD_CREATE_DETACHED = (int)2;
	/** <i>native declaration : /usr/include/pthread_impl.h</i> */
	public static final int _PTHREAD_RWLOCK_SIG_init = (int)0x2DA8B3B4;
	/** <i>native declaration : /usr/include/pthread_impl.h</i> */
	public static final int _PTHREAD_ERRORCHECK_MUTEX_SIG_init = (int)0x32AAABA1;
	/** <i>native declaration : /usr/include/Availability.h</i> */
	public static final int __IPHONE_5_1 = (int)50100;
	/** <i>native declaration : /usr/include/Availability.h</i> */
	public static final int __IPHONE_5_0 = (int)50000;
	/**
	 * define<br>
	 * Conversion Error : { 0x2DA8B3B4, { 0 } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/pthread.h:0</i><br>
	 * { 0x2DA8B3B4, { 0 } }
	 */
	/** <i>native declaration : /usr/include/pthread.h</i> */
	public static final int PTHREAD_CANCEL_DEFERRED = (int)0x02;
	/**
	 * define<br>
	 * Conversion Error : { 0x32AAABA7, { 0 } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/pthread.h:0</i><br>
	 * { 0x32AAABA7, { 0 } }
	 */
	/** <i>native declaration : /usr/include/pthread_impl.h</i> */
	public static final int SCHED_OTHER = (int)1;
	/** <i>native declaration : /usr/include/pthread_impl.h</i> */
	public static final int _PTHREAD_MUTEX_SIG_init = (int)0x32AAABA7;
	/** <i>native declaration : /usr/include/pthread_impl.h</i> */
	public static final int SCHED_FIFO = (int)4;
	/**
	 * define<br>
	 * Conversion Error : { 0x32AAABA2, { 0 } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/pthread.h:0</i><br>
	 * { 0x32AAABA2, { 0 } }
	 */
	/**
	 * define<br>
	 * Conversion Error : { 0x32AAABA1, { 0 } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/pthread.h:0</i><br>
	 * { 0x32AAABA1, { 0 } }
	 */
	/** <i>native declaration : /usr/include/Availability.h</i> */
	public static final int __IPHONE_3_2 = (int)30200;
	/** <i>native declaration : /usr/include/Availability.h</i> */
	public static final int __IPHONE_3_1 = (int)30100;
	/** <i>native declaration : /usr/include/Availability.h</i> */
	public static final int __IPHONE_3_0 = (int)30000;
	/** <i>native declaration : /usr/include/pthread.h:0</i> */
	public static abstract class pthread_atfork_arg1_callback extends Callback<pthread_atfork_arg1_callback > {
		public abstract void apply();
	};
	/** <i>native declaration : /usr/include/pthread.h:0</i> */
	public static abstract class pthread_atfork_arg2_callback extends Callback<pthread_atfork_arg2_callback > {
		public abstract void apply();
	};
	/** <i>native declaration : /usr/include/pthread.h:0</i> */
	public static abstract class pthread_atfork_arg3_callback extends Callback<pthread_atfork_arg3_callback > {
		public abstract void apply();
	};
	/** <i>native declaration : /usr/include/pthread.h:0</i> */
	public static abstract class pthread_create_arg1_callback extends Callback<pthread_create_arg1_callback > {
		public final Pointer<? > apply(Pointer<? > voidPtr1) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(voidPtr1)));
		}
		@Ptr 
		public abstract long apply(@Ptr long voidPtr1);
	};
	/** <i>native declaration : /usr/include/pthread.h:0</i> */
	public static abstract class pthread_key_create_arg1_callback extends Callback<pthread_key_create_arg1_callback > {
		public final void apply(Pointer<? > voidPtr1) {
			apply(Pointer.getPeer(voidPtr1));
		}
		public abstract void apply(@Ptr long voidPtr1);
	};
	/** <i>native declaration : /usr/include/pthread.h:0</i> */
	public static abstract class pthread_once_arg1_callback extends Callback<pthread_once_arg1_callback > {
		public abstract void apply();
	};
	/** <i>native declaration : /usr/include/pthread.h:0</i> */
	public static abstract class pthread_create_suspended_np_arg1_callback extends Callback<pthread_create_suspended_np_arg1_callback > {
		public final Pointer<? > apply(Pointer<? > voidPtr1) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(voidPtr1)));
		}
		@Ptr 
		public abstract long apply(@Ptr long voidPtr1);
	};
	/**
	 * Original signature : <code>int sched_yield()</code><br>
	 * <i>native declaration : /usr/include/sched.h:10</i>
	 */
	public static native int sched_yield();
	/**
	 * Original signature : <code>int sched_get_priority_min(int)</code><br>
	 * <i>native declaration : /usr/include/sched.h:11</i>
	 */
	public static native int sched_get_priority_min(int int1);
	/**
	 * Original signature : <code>int sched_get_priority_max(int)</code><br>
	 * <i>native declaration : /usr/include/sched.h:12</i>
	 */
	public static native int sched_get_priority_max(int int1);
	/**
	 * Original signature : <code>char* asctime(tm*)</code><br>
	 * <i>native declaration : /usr/include/time.h:121</i>
	 */
	public static Pointer<Byte > asctime(Pointer<tm > tmPtr1) {
		return Pointer.pointerToAddress(asctime(Pointer.getPeer(tmPtr1)), Byte.class);
	}
	@Ptr 
	protected native static long asctime(@Ptr long tmPtr1);
	/**
	 * Original signature : <code>clock_t clock()</code><br>
	 * <i>native declaration : /usr/include/time.h:122</i>
	 */
	@Ptr 
	public static native long clock();
	/**
	 * Original signature : <code>char* ctime(const time_t*)</code><br>
	 * <i>native declaration : /usr/include/time.h:123</i>
	 */
	public static Pointer<Byte > ctime(Pointer<SizeT > time_tPtr1) {
		return Pointer.pointerToAddress(ctime(Pointer.getPeer(time_tPtr1)), Byte.class);
	}
	@Ptr 
	protected native static long ctime(@Ptr long time_tPtr1);
	/**
	 * Original signature : <code>double difftime(time_t, time_t)</code><br>
	 * <i>native declaration : /usr/include/time.h:124</i>
	 */
	public static native double difftime(@Ptr long time_t1, @Ptr long time_t2);
	/**
	 * Original signature : <code>tm* getdate(const char*)</code><br>
	 * <i>native declaration : /usr/include/time.h:125</i>
	 */
	public static Pointer<tm > getdate(Pointer<Byte > charPtr1) {
		return Pointer.pointerToAddress(getdate(Pointer.getPeer(charPtr1)), tm.class);
	}
	@Ptr 
	protected native static long getdate(@Ptr long charPtr1);
	/**
	 * Original signature : <code>tm* gmtime(const time_t*)</code><br>
	 * <i>native declaration : /usr/include/time.h:126</i>
	 */
	public static Pointer<tm > gmtime(Pointer<SizeT > time_tPtr1) {
		return Pointer.pointerToAddress(gmtime(Pointer.getPeer(time_tPtr1)), tm.class);
	}
	@Ptr 
	protected native static long gmtime(@Ptr long time_tPtr1);
	/**
	 * Original signature : <code>tm* localtime(const time_t*)</code><br>
	 * <i>native declaration : /usr/include/time.h:127</i>
	 */
	public static Pointer<tm > localtime(Pointer<SizeT > time_tPtr1) {
		return Pointer.pointerToAddress(localtime(Pointer.getPeer(time_tPtr1)), tm.class);
	}
	@Ptr 
	protected native static long localtime(@Ptr long time_tPtr1);
	/**
	 * Original signature : <code>time_t mktime(tm*)</code><br>
	 * <i>native declaration : /usr/include/time.h:128</i>
	 */
	@Ptr 
	public static long mktime(Pointer<tm > tmPtr1) {
		return mktime(Pointer.getPeer(tmPtr1));
	}
	@Ptr 
	protected native static long mktime(@Ptr long tmPtr1);
	/**
	 * Original signature : <code>size_t strftime(char*, size_t, const char*, tm*)</code><br>
	 * <i>native declaration : /usr/include/time.h:129</i>
	 */
	@Ptr 
	public static long strftime(Pointer<Byte > charPtr1, @Ptr long size_t1, Pointer<Byte > charPtr2, Pointer<tm > tmPtr1) {
		return strftime(Pointer.getPeer(charPtr1), size_t1, Pointer.getPeer(charPtr2), Pointer.getPeer(tmPtr1));
	}
	@Ptr 
	protected native static long strftime(@Ptr long charPtr1, @Ptr long size_t1, @Ptr long charPtr2, @Ptr long tmPtr1);
	/**
	 * Original signature : <code>char* strptime(const char*, const char*, tm*)</code><br>
	 * <i>native declaration : /usr/include/time.h:130</i>
	 */
	public static Pointer<Byte > strptime(Pointer<Byte > charPtr1, Pointer<Byte > charPtr2, Pointer<tm > tmPtr1) {
		return Pointer.pointerToAddress(strptime(Pointer.getPeer(charPtr1), Pointer.getPeer(charPtr2), Pointer.getPeer(tmPtr1)), Byte.class);
	}
	@Ptr 
	protected native static long strptime(@Ptr long charPtr1, @Ptr long charPtr2, @Ptr long tmPtr1);
	/**
	 * Original signature : <code>time_t time(time_t*)</code><br>
	 * <i>native declaration : /usr/include/time.h:131</i>
	 */
	@Ptr 
	public static long time(Pointer<SizeT > time_tPtr1) {
		return time(Pointer.getPeer(time_tPtr1));
	}
	@Ptr 
	protected native static long time(@Ptr long time_tPtr1);
	/**
	 * Original signature : <code>void tzset()</code><br>
	 * <i>native declaration : /usr/include/time.h:134</i>
	 */
	public static native void tzset();
	/**
	 * [TSF] Thread safe functions<br>
	 * Original signature : <code>char* asctime_r(tm*, char*)</code><br>
	 * <i>native declaration : /usr/include/time.h:138</i>
	 */
	public static Pointer<Byte > asctime_r(Pointer<tm > tmPtr1, Pointer<Byte > charPtr1) {
		return Pointer.pointerToAddress(asctime_r(Pointer.getPeer(tmPtr1), Pointer.getPeer(charPtr1)), Byte.class);
	}
	@Ptr 
	protected native static long asctime_r(@Ptr long tmPtr1, @Ptr long charPtr1);
	/**
	 * Original signature : <code>char* ctime_r(const time_t*, char*)</code><br>
	 * <i>native declaration : /usr/include/time.h:139</i>
	 */
	public static Pointer<Byte > ctime_r(Pointer<SizeT > time_tPtr1, Pointer<Byte > charPtr1) {
		return Pointer.pointerToAddress(ctime_r(Pointer.getPeer(time_tPtr1), Pointer.getPeer(charPtr1)), Byte.class);
	}
	@Ptr 
	protected native static long ctime_r(@Ptr long time_tPtr1, @Ptr long charPtr1);
	/**
	 * Original signature : <code>tm* gmtime_r(const time_t*, tm*)</code><br>
	 * <i>native declaration : /usr/include/time.h:140</i>
	 */
	public static Pointer<tm > gmtime_r(Pointer<SizeT > time_tPtr1, Pointer<tm > tmPtr1) {
		return Pointer.pointerToAddress(gmtime_r(Pointer.getPeer(time_tPtr1), Pointer.getPeer(tmPtr1)), tm.class);
	}
	@Ptr 
	protected native static long gmtime_r(@Ptr long time_tPtr1, @Ptr long tmPtr1);
	/**
	 * Original signature : <code>tm* localtime_r(const time_t*, tm*)</code><br>
	 * <i>native declaration : /usr/include/time.h:141</i>
	 */
	public static Pointer<tm > localtime_r(Pointer<SizeT > time_tPtr1, Pointer<tm > tmPtr1) {
		return Pointer.pointerToAddress(localtime_r(Pointer.getPeer(time_tPtr1), Pointer.getPeer(tmPtr1)), tm.class);
	}
	@Ptr 
	protected native static long localtime_r(@Ptr long time_tPtr1, @Ptr long tmPtr1);
	/**
	 * Original signature : <code>time_t posix2time(time_t)</code><br>
	 * <i>native declaration : /usr/include/time.h:144</i>
	 */
	@Ptr 
	public static native long posix2time(@Ptr long time_t1);
	/**
	 * Original signature : <code>void tzsetwall()</code><br>
	 * <i>native declaration : /usr/include/time.h:148</i>
	 */
	public static native void tzsetwall();
	/**
	 * Original signature : <code>time_t time2posix(time_t)</code><br>
	 * <i>native declaration : /usr/include/time.h:149</i>
	 */
	@Ptr 
	public static native long time2posix(@Ptr long time_t1);
	/**
	 * Original signature : <code>time_t timelocal(const tm*)</code><br>
	 * <i>native declaration : /usr/include/time.h:150</i>
	 */
	@Ptr 
	public static long timelocal(Pointer<tm > tmPtr1) {
		return timelocal(Pointer.getPeer(tmPtr1));
	}
	@Ptr 
	protected native static long timelocal(@Ptr long tmPtr1);
	/**
	 * Original signature : <code>time_t timegm(const tm*)</code><br>
	 * <i>native declaration : /usr/include/time.h:151</i>
	 */
	@Ptr 
	public static long timegm(Pointer<tm > tmPtr1) {
		return timegm(Pointer.getPeer(tmPtr1));
	}
	@Ptr 
	protected native static long timegm(@Ptr long tmPtr1);
	/**
	 * Original signature : <code>int nanosleep(timespec*, timespec*)</code><br>
	 * <i>native declaration : /usr/include/time.h:155</i>
	 */
	public static int nanosleep(Pointer timespecPtr1, Pointer timespecPtr2) {
		return nanosleep(Pointer.getPeer(timespecPtr1), Pointer.getPeer(timespecPtr2));
	}
	protected native static int nanosleep(@Ptr long timespecPtr1, @Ptr long timespecPtr2);
	/**
	 * Prototypes for all PTHREAD interfaces<br>
	 * Original signature : <code>int pthread_atfork(pthread_atfork_arg1_callback*, pthread_atfork_arg2_callback*, pthread_atfork_arg3_callback*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:211</i>
	 */
	public static int pthread_atfork(Pointer<PthreadLibrary.pthread_atfork_arg1_callback > arg1, Pointer<PthreadLibrary.pthread_atfork_arg2_callback > arg2, Pointer<PthreadLibrary.pthread_atfork_arg3_callback > arg3) {
		return pthread_atfork(Pointer.getPeer(arg1), Pointer.getPeer(arg2), Pointer.getPeer(arg3));
	}
	protected native static int pthread_atfork(@Ptr long arg1, @Ptr long arg2, @Ptr long arg3);
	/**
	 * Original signature : <code>int pthread_attr_destroy(pthread_attr_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:213</i>
	 */
	public static int pthread_attr_destroy(Pointer pthread_attr_tPtr1) {
		return pthread_attr_destroy(Pointer.getPeer(pthread_attr_tPtr1));
	}
	protected native static int pthread_attr_destroy(@Ptr long pthread_attr_tPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getdetachstate(const pthread_attr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:214</i>
	 */
	public static int pthread_attr_getdetachstate(Pointer pthread_attr_tPtr1, Pointer<Integer > intPtr1) {
		return pthread_attr_getdetachstate(Pointer.getPeer(pthread_attr_tPtr1), Pointer.getPeer(intPtr1));
	}
	protected native static int pthread_attr_getdetachstate(@Ptr long pthread_attr_tPtr1, @Ptr long intPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getguardsize(const pthread_attr_t*, size_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:216</i>
	 */
	public static int pthread_attr_getguardsize(Pointer pthread_attr_tPtr1, Pointer<SizeT > size_tPtr1) {
		return pthread_attr_getguardsize(Pointer.getPeer(pthread_attr_tPtr1), Pointer.getPeer(size_tPtr1));
	}
	protected native static int pthread_attr_getguardsize(@Ptr long pthread_attr_tPtr1, @Ptr long size_tPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getinheritsched(const pthread_attr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:218</i>
	 */
	public static int pthread_attr_getinheritsched(Pointer pthread_attr_tPtr1, Pointer<Integer > intPtr1) {
		return pthread_attr_getinheritsched(Pointer.getPeer(pthread_attr_tPtr1), Pointer.getPeer(intPtr1));
	}
	protected native static int pthread_attr_getinheritsched(@Ptr long pthread_attr_tPtr1, @Ptr long intPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getschedparam(const pthread_attr_t*, sched_param*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:220</i>
	 */
	public static int pthread_attr_getschedparam(Pointer pthread_attr_tPtr1, Pointer<sched_param > sched_paramPtr1) {
		return pthread_attr_getschedparam(Pointer.getPeer(pthread_attr_tPtr1), Pointer.getPeer(sched_paramPtr1));
	}
	protected native static int pthread_attr_getschedparam(@Ptr long pthread_attr_tPtr1, @Ptr long sched_paramPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getschedpolicy(const pthread_attr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:222</i>
	 */
	public static int pthread_attr_getschedpolicy(Pointer pthread_attr_tPtr1, Pointer<Integer > intPtr1) {
		return pthread_attr_getschedpolicy(Pointer.getPeer(pthread_attr_tPtr1), Pointer.getPeer(intPtr1));
	}
	protected native static int pthread_attr_getschedpolicy(@Ptr long pthread_attr_tPtr1, @Ptr long intPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getscope(const pthread_attr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:224</i>
	 */
	public static int pthread_attr_getscope(Pointer pthread_attr_tPtr1, Pointer<Integer > intPtr1) {
		return pthread_attr_getscope(Pointer.getPeer(pthread_attr_tPtr1), Pointer.getPeer(intPtr1));
	}
	protected native static int pthread_attr_getscope(@Ptr long pthread_attr_tPtr1, @Ptr long intPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getstack(const pthread_attr_t*, void**, size_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:225</i>
	 */
	public static int pthread_attr_getstack(Pointer pthread_attr_tPtr1, Pointer<Pointer<? > > voidPtrPtr1, Pointer<SizeT > size_tPtr1) {
		return pthread_attr_getstack(Pointer.getPeer(pthread_attr_tPtr1), Pointer.getPeer(voidPtrPtr1), Pointer.getPeer(size_tPtr1));
	}
	protected native static int pthread_attr_getstack(@Ptr long pthread_attr_tPtr1, @Ptr long voidPtrPtr1, @Ptr long size_tPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getstackaddr(const pthread_attr_t*, void**)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:227</i>
	 */
	public static int pthread_attr_getstackaddr(Pointer pthread_attr_tPtr1, Pointer<Pointer<? > > voidPtrPtr1) {
		return pthread_attr_getstackaddr(Pointer.getPeer(pthread_attr_tPtr1), Pointer.getPeer(voidPtrPtr1));
	}
	protected native static int pthread_attr_getstackaddr(@Ptr long pthread_attr_tPtr1, @Ptr long voidPtrPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getstacksize(const pthread_attr_t*, size_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:229</i>
	 */
	public static int pthread_attr_getstacksize(Pointer pthread_attr_tPtr1, Pointer<SizeT > size_tPtr1) {
		return pthread_attr_getstacksize(Pointer.getPeer(pthread_attr_tPtr1), Pointer.getPeer(size_tPtr1));
	}
	protected native static int pthread_attr_getstacksize(@Ptr long pthread_attr_tPtr1, @Ptr long size_tPtr1);
	/**
	 * Original signature : <code>int pthread_attr_init(pthread_attr_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:231</i>
	 */
	public static int pthread_attr_init(Pointer pthread_attr_tPtr1) {
		return pthread_attr_init(Pointer.getPeer(pthread_attr_tPtr1));
	}
	protected native static int pthread_attr_init(@Ptr long pthread_attr_tPtr1);
	/**
	 * Original signature : <code>int pthread_attr_setdetachstate(pthread_attr_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:232</i>
	 */
	public static int pthread_attr_setdetachstate(Pointer pthread_attr_tPtr1, int int1) {
		return pthread_attr_setdetachstate(Pointer.getPeer(pthread_attr_tPtr1), int1);
	}
	protected native static int pthread_attr_setdetachstate(@Ptr long pthread_attr_tPtr1, int int1);
	/**
	 * Original signature : <code>int pthread_attr_setguardsize(pthread_attr_t*, size_t)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:234</i>
	 */
	public static int pthread_attr_setguardsize(Pointer pthread_attr_tPtr1, @Ptr long size_t1) {
		return pthread_attr_setguardsize(Pointer.getPeer(pthread_attr_tPtr1), size_t1);
	}
	protected native static int pthread_attr_setguardsize(@Ptr long pthread_attr_tPtr1, @Ptr long size_t1);
	/**
	 * Original signature : <code>int pthread_attr_setinheritsched(pthread_attr_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:235</i>
	 */
	public static int pthread_attr_setinheritsched(Pointer pthread_attr_tPtr1, int int1) {
		return pthread_attr_setinheritsched(Pointer.getPeer(pthread_attr_tPtr1), int1);
	}
	protected native static int pthread_attr_setinheritsched(@Ptr long pthread_attr_tPtr1, int int1);
	/**
	 * Original signature : <code>int pthread_attr_setschedparam(pthread_attr_t*, sched_param*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:237</i>
	 */
	public static int pthread_attr_setschedparam(Pointer pthread_attr_tPtr1, Pointer<sched_param > sched_paramPtr1) {
		return pthread_attr_setschedparam(Pointer.getPeer(pthread_attr_tPtr1), Pointer.getPeer(sched_paramPtr1));
	}
	protected native static int pthread_attr_setschedparam(@Ptr long pthread_attr_tPtr1, @Ptr long sched_paramPtr1);
	/**
	 * Original signature : <code>int pthread_attr_setschedpolicy(pthread_attr_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:239</i>
	 */
	public static int pthread_attr_setschedpolicy(Pointer pthread_attr_tPtr1, int int1) {
		return pthread_attr_setschedpolicy(Pointer.getPeer(pthread_attr_tPtr1), int1);
	}
	protected native static int pthread_attr_setschedpolicy(@Ptr long pthread_attr_tPtr1, int int1);
	/**
	 * Original signature : <code>int pthread_attr_setscope(pthread_attr_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:241</i>
	 */
	public static int pthread_attr_setscope(Pointer pthread_attr_tPtr1, int int1) {
		return pthread_attr_setscope(Pointer.getPeer(pthread_attr_tPtr1), int1);
	}
	protected native static int pthread_attr_setscope(@Ptr long pthread_attr_tPtr1, int int1);
	/**
	 * Original signature : <code>int pthread_attr_setstack(pthread_attr_t*, void*, size_t)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:242</i>
	 */
	public static int pthread_attr_setstack(Pointer pthread_attr_tPtr1, Pointer<? > voidPtr1, @Ptr long size_t1) {
		return pthread_attr_setstack(Pointer.getPeer(pthread_attr_tPtr1), Pointer.getPeer(voidPtr1), size_t1);
	}
	protected native static int pthread_attr_setstack(@Ptr long pthread_attr_tPtr1, @Ptr long voidPtr1, @Ptr long size_t1);
	/**
	 * Original signature : <code>int pthread_attr_setstackaddr(pthread_attr_t*, void*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:244</i>
	 */
	public static int pthread_attr_setstackaddr(Pointer pthread_attr_tPtr1, Pointer<? > voidPtr1) {
		return pthread_attr_setstackaddr(Pointer.getPeer(pthread_attr_tPtr1), Pointer.getPeer(voidPtr1));
	}
	protected native static int pthread_attr_setstackaddr(@Ptr long pthread_attr_tPtr1, @Ptr long voidPtr1);
	/**
	 * Original signature : <code>int pthread_attr_setstacksize(pthread_attr_t*, size_t)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:246</i>
	 */
	public static int pthread_attr_setstacksize(Pointer pthread_attr_tPtr1, @Ptr long size_t1) {
		return pthread_attr_setstacksize(Pointer.getPeer(pthread_attr_tPtr1), size_t1);
	}
	protected native static int pthread_attr_setstacksize(@Ptr long pthread_attr_tPtr1, @Ptr long size_t1);
	/**
	 * Original signature : <code>int pthread_cancel(pthread_t)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:247</i>
	 */
	public static int pthread_cancel(PthreadLibrary.pthread_t pthread_t1) {
		return pthread_cancel(Pointer.getPeer(pthread_t1));
	}
	protected native static int pthread_cancel(@Ptr long pthread_t1);
	/**
	 * Original signature : <code>int pthread_cond_broadcast(pthread_cond_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:249</i>
	 */
	public static int pthread_cond_broadcast(Pointer pthread_cond_tPtr1) {
		return pthread_cond_broadcast(Pointer.getPeer(pthread_cond_tPtr1));
	}
	protected native static int pthread_cond_broadcast(@Ptr long pthread_cond_tPtr1);
	/**
	 * Original signature : <code>int pthread_cond_destroy(pthread_cond_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:250</i>
	 */
	public static int pthread_cond_destroy(Pointer pthread_cond_tPtr1) {
		return pthread_cond_destroy(Pointer.getPeer(pthread_cond_tPtr1));
	}
	protected native static int pthread_cond_destroy(@Ptr long pthread_cond_tPtr1);
	/**
	 * Original signature : <code>int pthread_cond_init(pthread_cond_t*, const pthread_condattr_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:251</i>
	 */
	public static int pthread_cond_init(Pointer pthread_cond_tPtr1, Pointer pthread_condattr_tPtr1) {
		return pthread_cond_init(Pointer.getPeer(pthread_cond_tPtr1), Pointer.getPeer(pthread_condattr_tPtr1));
	}
	protected native static int pthread_cond_init(@Ptr long pthread_cond_tPtr1, @Ptr long pthread_condattr_tPtr1);
	/**
	 * Original signature : <code>int pthread_cond_signal(pthread_cond_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:253</i>
	 */
	public static int pthread_cond_signal(Pointer pthread_cond_tPtr1) {
		return pthread_cond_signal(Pointer.getPeer(pthread_cond_tPtr1));
	}
	protected native static int pthread_cond_signal(@Ptr long pthread_cond_tPtr1);
	/**
	 * Original signature : <code>int pthread_cond_timedwait(pthread_cond_t*, pthread_mutex_t*, timespec*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:254</i>
	 */
	public static int pthread_cond_timedwait(Pointer pthread_cond_tPtr1, Pointer pthread_mutex_tPtr1, Pointer timespecPtr1) {
		return pthread_cond_timedwait(Pointer.getPeer(pthread_cond_tPtr1), Pointer.getPeer(pthread_mutex_tPtr1), Pointer.getPeer(timespecPtr1));
	}
	protected native static int pthread_cond_timedwait(@Ptr long pthread_cond_tPtr1, @Ptr long pthread_mutex_tPtr1, @Ptr long timespecPtr1);
	/**
	 * Original signature : <code>int pthread_cond_wait(pthread_cond_t*, pthread_mutex_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:257</i>
	 */
	public static int pthread_cond_wait(Pointer pthread_cond_tPtr1, Pointer pthread_mutex_tPtr1) {
		return pthread_cond_wait(Pointer.getPeer(pthread_cond_tPtr1), Pointer.getPeer(pthread_mutex_tPtr1));
	}
	protected native static int pthread_cond_wait(@Ptr long pthread_cond_tPtr1, @Ptr long pthread_mutex_tPtr1);
	/**
	 * Original signature : <code>int pthread_condattr_destroy(pthread_condattr_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:259</i>
	 */
	public static int pthread_condattr_destroy(Pointer pthread_condattr_tPtr1) {
		return pthread_condattr_destroy(Pointer.getPeer(pthread_condattr_tPtr1));
	}
	protected native static int pthread_condattr_destroy(@Ptr long pthread_condattr_tPtr1);
	/**
	 * Original signature : <code>int pthread_condattr_init(pthread_condattr_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:260</i>
	 */
	public static int pthread_condattr_init(Pointer pthread_condattr_tPtr1) {
		return pthread_condattr_init(Pointer.getPeer(pthread_condattr_tPtr1));
	}
	protected native static int pthread_condattr_init(@Ptr long pthread_condattr_tPtr1);
	/**
	 * Original signature : <code>int pthread_condattr_getpshared(const pthread_condattr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:261</i>
	 */
	public static int pthread_condattr_getpshared(Pointer pthread_condattr_tPtr1, Pointer<Integer > intPtr1) {
		return pthread_condattr_getpshared(Pointer.getPeer(pthread_condattr_tPtr1), Pointer.getPeer(intPtr1));
	}
	protected native static int pthread_condattr_getpshared(@Ptr long pthread_condattr_tPtr1, @Ptr long intPtr1);
	/**
	 * Original signature : <code>int pthread_condattr_setpshared(pthread_condattr_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:263</i>
	 */
	public static int pthread_condattr_setpshared(Pointer pthread_condattr_tPtr1, int int1) {
		return pthread_condattr_setpshared(Pointer.getPeer(pthread_condattr_tPtr1), int1);
	}
	protected native static int pthread_condattr_setpshared(@Ptr long pthread_condattr_tPtr1, int int1);
	/**
	 * Original signature : <code>int pthread_create(pthread_t*, const pthread_attr_t*, pthread_create_arg1_callback*, void*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:265</i>
	 */
	public static int pthread_create(Pointer<PthreadLibrary.pthread_t > pthread_tPtr1, Pointer pthread_attr_tPtr1, Pointer<PthreadLibrary.pthread_create_arg1_callback > arg1, Pointer<? > voidPtr1) {
		return pthread_create(Pointer.getPeer(pthread_tPtr1), Pointer.getPeer(pthread_attr_tPtr1), Pointer.getPeer(arg1), Pointer.getPeer(voidPtr1));
	}
	protected native static int pthread_create(@Ptr long pthread_tPtr1, @Ptr long pthread_attr_tPtr1, @Ptr long arg1, @Ptr long voidPtr1);
	/**
	 * Original signature : <code>int pthread_detach(pthread_t)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:269</i>
	 */
	public static int pthread_detach(PthreadLibrary.pthread_t pthread_t1) {
		return pthread_detach(Pointer.getPeer(pthread_t1));
	}
	protected native static int pthread_detach(@Ptr long pthread_t1);
	/**
	 * Original signature : <code>int pthread_equal(pthread_t, pthread_t)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:270</i>
	 */
	public static int pthread_equal(PthreadLibrary.pthread_t pthread_t1, PthreadLibrary.pthread_t pthread_t2) {
		return pthread_equal(Pointer.getPeer(pthread_t1), Pointer.getPeer(pthread_t2));
	}
	protected native static int pthread_equal(@Ptr long pthread_t1, @Ptr long pthread_t2);
	/**
	 * Original signature : <code>void pthread_exit(void*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:272</i>
	 */
	public static void pthread_exit(Pointer<? > voidPtr1) {
		pthread_exit(Pointer.getPeer(voidPtr1));
	}
	protected native static void pthread_exit(@Ptr long voidPtr1);
	/**
	 * Original signature : <code>int pthread_getconcurrency()</code><br>
	 * <i>native declaration : /usr/include/pthread.h:273</i>
	 */
	public static native int pthread_getconcurrency();
	/**
	 * Original signature : <code>int pthread_getschedparam(pthread_t, int*, sched_param*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:274</i>
	 */
	public static int pthread_getschedparam(PthreadLibrary.pthread_t pthread_t1, Pointer<Integer > intPtr1, Pointer<sched_param > sched_paramPtr1) {
		return pthread_getschedparam(Pointer.getPeer(pthread_t1), Pointer.getPeer(intPtr1), Pointer.getPeer(sched_paramPtr1));
	}
	protected native static int pthread_getschedparam(@Ptr long pthread_t1, @Ptr long intPtr1, @Ptr long sched_paramPtr1);
	/**
	 * Original signature : <code>void* pthread_getspecific(pthread_key_t)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:275</i>
	 */
	public static Pointer<? > pthread_getspecific(@Ptr long pthread_key_t1) {
		return Pointer.pointerToAddress(pthread_getspecific$2(pthread_key_t1));
	}
	@Ptr 
	@Name("pthread_getspecific") 
	protected native static long pthread_getspecific$2(@Ptr long pthread_key_t1);
	/**
	 * Original signature : <code>int pthread_join(pthread_t, void**)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:276</i>
	 */
	public static int pthread_join(PthreadLibrary.pthread_t pthread_t1, Pointer<Pointer<? > > voidPtrPtr1) {
		return pthread_join(Pointer.getPeer(pthread_t1), Pointer.getPeer(voidPtrPtr1));
	}
	protected native static int pthread_join(@Ptr long pthread_t1, @Ptr long voidPtrPtr1);
	/**
	 * Original signature : <code>int pthread_key_create(pthread_key_t*, pthread_key_create_arg1_callback*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:277</i>
	 */
	public static int pthread_key_create(Pointer<SizeT > pthread_key_tPtr1, Pointer<PthreadLibrary.pthread_key_create_arg1_callback > arg1) {
		return pthread_key_create(Pointer.getPeer(pthread_key_tPtr1), Pointer.getPeer(arg1));
	}
	protected native static int pthread_key_create(@Ptr long pthread_key_tPtr1, @Ptr long arg1);
	/**
	 * Original signature : <code>int pthread_key_delete(pthread_key_t)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:278</i>
	 */
	public static native int pthread_key_delete(@Ptr long pthread_key_t1);
	/**
	 * Original signature : <code>int pthread_mutex_destroy(pthread_mutex_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:279</i>
	 */
	public static int pthread_mutex_destroy(Pointer pthread_mutex_tPtr1) {
		return pthread_mutex_destroy(Pointer.getPeer(pthread_mutex_tPtr1));
	}
	protected native static int pthread_mutex_destroy(@Ptr long pthread_mutex_tPtr1);
	/**
	 * Original signature : <code>int pthread_mutex_getprioceiling(const pthread_mutex_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:280</i>
	 */
	public static int pthread_mutex_getprioceiling(Pointer pthread_mutex_tPtr1, Pointer<Integer > intPtr1) {
		return pthread_mutex_getprioceiling(Pointer.getPeer(pthread_mutex_tPtr1), Pointer.getPeer(intPtr1));
	}
	protected native static int pthread_mutex_getprioceiling(@Ptr long pthread_mutex_tPtr1, @Ptr long intPtr1);
	/**
	 * Original signature : <code>int pthread_mutex_init(pthread_mutex_t*, const pthread_mutexattr_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:281</i>
	 */
	public static int pthread_mutex_init(Pointer pthread_mutex_tPtr1, Pointer pthread_mutexattr_tPtr1) {
		return pthread_mutex_init(Pointer.getPeer(pthread_mutex_tPtr1), Pointer.getPeer(pthread_mutexattr_tPtr1));
	}
	protected native static int pthread_mutex_init(@Ptr long pthread_mutex_tPtr1, @Ptr long pthread_mutexattr_tPtr1);
	/**
	 * Original signature : <code>int pthread_mutex_lock(pthread_mutex_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:282</i>
	 */
	public static int pthread_mutex_lock(Pointer pthread_mutex_tPtr1) {
		return pthread_mutex_lock(Pointer.getPeer(pthread_mutex_tPtr1));
	}
	protected native static int pthread_mutex_lock(@Ptr long pthread_mutex_tPtr1);
	/**
	 * Original signature : <code>int pthread_mutex_setprioceiling(pthread_mutex_t*, int, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:283</i>
	 */
	public static int pthread_mutex_setprioceiling(Pointer pthread_mutex_tPtr1, int int1, Pointer<Integer > intPtr1) {
		return pthread_mutex_setprioceiling(Pointer.getPeer(pthread_mutex_tPtr1), int1, Pointer.getPeer(intPtr1));
	}
	protected native static int pthread_mutex_setprioceiling(@Ptr long pthread_mutex_tPtr1, int int1, @Ptr long intPtr1);
	/**
	 * Original signature : <code>int pthread_mutex_trylock(pthread_mutex_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:284</i>
	 */
	public static int pthread_mutex_trylock(Pointer pthread_mutex_tPtr1) {
		return pthread_mutex_trylock(Pointer.getPeer(pthread_mutex_tPtr1));
	}
	protected native static int pthread_mutex_trylock(@Ptr long pthread_mutex_tPtr1);
	/**
	 * Original signature : <code>int pthread_mutex_unlock(pthread_mutex_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:285</i>
	 */
	public static int pthread_mutex_unlock(Pointer pthread_mutex_tPtr1) {
		return pthread_mutex_unlock(Pointer.getPeer(pthread_mutex_tPtr1));
	}
	protected native static int pthread_mutex_unlock(@Ptr long pthread_mutex_tPtr1);
	/**
	 * Original signature : <code>int pthread_mutexattr_destroy(pthread_mutexattr_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:286</i>
	 */
	public static int pthread_mutexattr_destroy(Pointer pthread_mutexattr_tPtr1) {
		return pthread_mutexattr_destroy(Pointer.getPeer(pthread_mutexattr_tPtr1));
	}
	protected native static int pthread_mutexattr_destroy(@Ptr long pthread_mutexattr_tPtr1);
	/**
	 * Original signature : <code>int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:287</i>
	 */
	public static int pthread_mutexattr_getprioceiling(Pointer pthread_mutexattr_tPtr1, Pointer<Integer > intPtr1) {
		return pthread_mutexattr_getprioceiling(Pointer.getPeer(pthread_mutexattr_tPtr1), Pointer.getPeer(intPtr1));
	}
	protected native static int pthread_mutexattr_getprioceiling(@Ptr long pthread_mutexattr_tPtr1, @Ptr long intPtr1);
	/**
	 * Original signature : <code>int pthread_mutexattr_getprotocol(const pthread_mutexattr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:288</i>
	 */
	public static int pthread_mutexattr_getprotocol(Pointer pthread_mutexattr_tPtr1, Pointer<Integer > intPtr1) {
		return pthread_mutexattr_getprotocol(Pointer.getPeer(pthread_mutexattr_tPtr1), Pointer.getPeer(intPtr1));
	}
	protected native static int pthread_mutexattr_getprotocol(@Ptr long pthread_mutexattr_tPtr1, @Ptr long intPtr1);
	/**
	 * Original signature : <code>int pthread_mutexattr_getpshared(const pthread_mutexattr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:289</i>
	 */
	public static int pthread_mutexattr_getpshared(Pointer pthread_mutexattr_tPtr1, Pointer<Integer > intPtr1) {
		return pthread_mutexattr_getpshared(Pointer.getPeer(pthread_mutexattr_tPtr1), Pointer.getPeer(intPtr1));
	}
	protected native static int pthread_mutexattr_getpshared(@Ptr long pthread_mutexattr_tPtr1, @Ptr long intPtr1);
	/**
	 * Original signature : <code>int pthread_mutexattr_gettype(const pthread_mutexattr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:290</i>
	 */
	public static int pthread_mutexattr_gettype(Pointer pthread_mutexattr_tPtr1, Pointer<Integer > intPtr1) {
		return pthread_mutexattr_gettype(Pointer.getPeer(pthread_mutexattr_tPtr1), Pointer.getPeer(intPtr1));
	}
	protected native static int pthread_mutexattr_gettype(@Ptr long pthread_mutexattr_tPtr1, @Ptr long intPtr1);
	/**
	 * Original signature : <code>int pthread_mutexattr_init(pthread_mutexattr_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:291</i>
	 */
	public static int pthread_mutexattr_init(Pointer pthread_mutexattr_tPtr1) {
		return pthread_mutexattr_init(Pointer.getPeer(pthread_mutexattr_tPtr1));
	}
	protected native static int pthread_mutexattr_init(@Ptr long pthread_mutexattr_tPtr1);
	/**
	 * Original signature : <code>int pthread_mutexattr_setprioceiling(pthread_mutexattr_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:292</i>
	 */
	public static int pthread_mutexattr_setprioceiling(Pointer pthread_mutexattr_tPtr1, int int1) {
		return pthread_mutexattr_setprioceiling(Pointer.getPeer(pthread_mutexattr_tPtr1), int1);
	}
	protected native static int pthread_mutexattr_setprioceiling(@Ptr long pthread_mutexattr_tPtr1, int int1);
	/**
	 * Original signature : <code>int pthread_mutexattr_setprotocol(pthread_mutexattr_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:293</i>
	 */
	public static int pthread_mutexattr_setprotocol(Pointer pthread_mutexattr_tPtr1, int int1) {
		return pthread_mutexattr_setprotocol(Pointer.getPeer(pthread_mutexattr_tPtr1), int1);
	}
	protected native static int pthread_mutexattr_setprotocol(@Ptr long pthread_mutexattr_tPtr1, int int1);
	/**
	 * Original signature : <code>int pthread_mutexattr_setpshared(pthread_mutexattr_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:294</i>
	 */
	public static int pthread_mutexattr_setpshared(Pointer pthread_mutexattr_tPtr1, int int1) {
		return pthread_mutexattr_setpshared(Pointer.getPeer(pthread_mutexattr_tPtr1), int1);
	}
	protected native static int pthread_mutexattr_setpshared(@Ptr long pthread_mutexattr_tPtr1, int int1);
	/**
	 * Original signature : <code>int pthread_mutexattr_settype(pthread_mutexattr_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:295</i>
	 */
	public static int pthread_mutexattr_settype(Pointer pthread_mutexattr_tPtr1, int int1) {
		return pthread_mutexattr_settype(Pointer.getPeer(pthread_mutexattr_tPtr1), int1);
	}
	protected native static int pthread_mutexattr_settype(@Ptr long pthread_mutexattr_tPtr1, int int1);
	/**
	 * Original signature : <code>int pthread_once(pthread_once_t*, pthread_once_arg1_callback*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:296</i>
	 */
	public static int pthread_once(Pointer pthread_once_tPtr1, Pointer<PthreadLibrary.pthread_once_arg1_callback > arg1) {
		return pthread_once(Pointer.getPeer(pthread_once_tPtr1), Pointer.getPeer(arg1));
	}
	protected native static int pthread_once(@Ptr long pthread_once_tPtr1, @Ptr long arg1);
	/**
	 * Original signature : <code>int pthread_rwlock_destroy(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:297</i>
	 */
	public static int pthread_rwlock_destroy(Pointer pthread_rwlock_tPtr1) {
		return pthread_rwlock_destroy(Pointer.getPeer(pthread_rwlock_tPtr1));
	}
	protected native static int pthread_rwlock_destroy(@Ptr long pthread_rwlock_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlock_init(pthread_rwlock_t*, const pthread_rwlockattr_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:298</i>
	 */
	public static int pthread_rwlock_init(Pointer pthread_rwlock_tPtr1, Pointer pthread_rwlockattr_tPtr1) {
		return pthread_rwlock_init(Pointer.getPeer(pthread_rwlock_tPtr1), Pointer.getPeer(pthread_rwlockattr_tPtr1));
	}
	protected native static int pthread_rwlock_init(@Ptr long pthread_rwlock_tPtr1, @Ptr long pthread_rwlockattr_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlock_rdlock(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:299</i>
	 */
	public static int pthread_rwlock_rdlock(Pointer pthread_rwlock_tPtr1) {
		return pthread_rwlock_rdlock(Pointer.getPeer(pthread_rwlock_tPtr1));
	}
	protected native static int pthread_rwlock_rdlock(@Ptr long pthread_rwlock_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlock_tryrdlock(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:300</i>
	 */
	public static int pthread_rwlock_tryrdlock(Pointer pthread_rwlock_tPtr1) {
		return pthread_rwlock_tryrdlock(Pointer.getPeer(pthread_rwlock_tPtr1));
	}
	protected native static int pthread_rwlock_tryrdlock(@Ptr long pthread_rwlock_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlock_trywrlock(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:301</i>
	 */
	public static int pthread_rwlock_trywrlock(Pointer pthread_rwlock_tPtr1) {
		return pthread_rwlock_trywrlock(Pointer.getPeer(pthread_rwlock_tPtr1));
	}
	protected native static int pthread_rwlock_trywrlock(@Ptr long pthread_rwlock_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlock_wrlock(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:302</i>
	 */
	public static int pthread_rwlock_wrlock(Pointer pthread_rwlock_tPtr1) {
		return pthread_rwlock_wrlock(Pointer.getPeer(pthread_rwlock_tPtr1));
	}
	protected native static int pthread_rwlock_wrlock(@Ptr long pthread_rwlock_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlock_unlock(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:303</i>
	 */
	public static int pthread_rwlock_unlock(Pointer pthread_rwlock_tPtr1) {
		return pthread_rwlock_unlock(Pointer.getPeer(pthread_rwlock_tPtr1));
	}
	protected native static int pthread_rwlock_unlock(@Ptr long pthread_rwlock_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlockattr_destroy(pthread_rwlockattr_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:304</i>
	 */
	public static int pthread_rwlockattr_destroy(Pointer pthread_rwlockattr_tPtr1) {
		return pthread_rwlockattr_destroy(Pointer.getPeer(pthread_rwlockattr_tPtr1));
	}
	protected native static int pthread_rwlockattr_destroy(@Ptr long pthread_rwlockattr_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:305</i>
	 */
	public static int pthread_rwlockattr_getpshared(Pointer pthread_rwlockattr_tPtr1, Pointer<Integer > intPtr1) {
		return pthread_rwlockattr_getpshared(Pointer.getPeer(pthread_rwlockattr_tPtr1), Pointer.getPeer(intPtr1));
	}
	protected native static int pthread_rwlockattr_getpshared(@Ptr long pthread_rwlockattr_tPtr1, @Ptr long intPtr1);
	/**
	 * Original signature : <code>int pthread_rwlockattr_init(pthread_rwlockattr_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:307</i>
	 */
	public static int pthread_rwlockattr_init(Pointer pthread_rwlockattr_tPtr1) {
		return pthread_rwlockattr_init(Pointer.getPeer(pthread_rwlockattr_tPtr1));
	}
	protected native static int pthread_rwlockattr_init(@Ptr long pthread_rwlockattr_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlockattr_setpshared(pthread_rwlockattr_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:308</i>
	 */
	public static int pthread_rwlockattr_setpshared(Pointer pthread_rwlockattr_tPtr1, int int1) {
		return pthread_rwlockattr_setpshared(Pointer.getPeer(pthread_rwlockattr_tPtr1), int1);
	}
	protected native static int pthread_rwlockattr_setpshared(@Ptr long pthread_rwlockattr_tPtr1, int int1);
	/**
	 * Original signature : <code>pthread_t pthread_self()</code><br>
	 * <i>native declaration : /usr/include/pthread.h:310</i>
	 */
	public static PthreadLibrary.pthread_t pthread_self() {
		return new PthreadLibrary.pthread_t(pthread_self$2());
	}
	@Ptr 
	@Name("pthread_self") 
	protected native static long pthread_self$2();
	/**
	 * Original signature : <code>int pthread_setcancelstate(int, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:312</i>
	 */
	public static int pthread_setcancelstate(int int1, Pointer<Integer > intPtr1) {
		return pthread_setcancelstate(int1, Pointer.getPeer(intPtr1));
	}
	protected native static int pthread_setcancelstate(int int1, @Ptr long intPtr1);
	/**
	 * Original signature : <code>int pthread_setcanceltype(int, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:313</i>
	 */
	public static int pthread_setcanceltype(int int1, Pointer<Integer > intPtr1) {
		return pthread_setcanceltype(int1, Pointer.getPeer(intPtr1));
	}
	protected native static int pthread_setcanceltype(int int1, @Ptr long intPtr1);
	/**
	 * Original signature : <code>int pthread_setconcurrency(int)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:314</i>
	 */
	public static native int pthread_setconcurrency(int int1);
	/**
	 * Original signature : <code>int pthread_setschedparam(pthread_t, int, sched_param*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:315</i>
	 */
	public static int pthread_setschedparam(PthreadLibrary.pthread_t pthread_t1, int int1, Pointer<sched_param > sched_paramPtr1) {
		return pthread_setschedparam(Pointer.getPeer(pthread_t1), int1, Pointer.getPeer(sched_paramPtr1));
	}
	protected native static int pthread_setschedparam(@Ptr long pthread_t1, int int1, @Ptr long sched_paramPtr1);
	/**
	 * Original signature : <code>int pthread_setspecific(pthread_key_t, const void*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:318</i>
	 */
	public static int pthread_setspecific(@Ptr long pthread_key_t1, Pointer<? > voidPtr1) {
		return pthread_setspecific(pthread_key_t1, Pointer.getPeer(voidPtr1));
	}
	protected native static int pthread_setspecific(@Ptr long pthread_key_t1, @Ptr long voidPtr1);
	/**
	 * Original signature : <code>void pthread_testcancel()</code><br>
	 * <i>native declaration : /usr/include/pthread.h:320</i>
	 */
	public static native void pthread_testcancel();
	/**
	 * returns non-zero if pthread_create or cthread_fork have been called<br>
	 * Original signature : <code>int pthread_is_threaded_np()</code><br>
	 * <i>native declaration : /usr/include/pthread.h:324</i>
	 */
	public static native int pthread_is_threaded_np();
	/**
	 * Original signature : <code>int pthread_threadid_np(pthread_t, __uint64_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:326</i>
	 */
	public static int pthread_threadid_np(PthreadLibrary.pthread_t pthread_t1, Pointer<Long > __uint64_tPtr1) {
		return pthread_threadid_np(Pointer.getPeer(pthread_t1), Pointer.getPeer(__uint64_tPtr1));
	}
	protected native static int pthread_threadid_np(@Ptr long pthread_t1, @Ptr long __uint64_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlock_longrdlock_np(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:328</i>
	 */
	public static int pthread_rwlock_longrdlock_np(Pointer pthread_rwlock_tPtr1) {
		return pthread_rwlock_longrdlock_np(Pointer.getPeer(pthread_rwlock_tPtr1));
	}
	protected native static int pthread_rwlock_longrdlock_np(@Ptr long pthread_rwlock_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlock_yieldwrlock_np(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:329</i>
	 */
	public static int pthread_rwlock_yieldwrlock_np(Pointer pthread_rwlock_tPtr1) {
		return pthread_rwlock_yieldwrlock_np(Pointer.getPeer(pthread_rwlock_tPtr1));
	}
	protected native static int pthread_rwlock_yieldwrlock_np(@Ptr long pthread_rwlock_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlock_downgrade_np(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:330</i>
	 */
	public static int pthread_rwlock_downgrade_np(Pointer pthread_rwlock_tPtr1) {
		return pthread_rwlock_downgrade_np(Pointer.getPeer(pthread_rwlock_tPtr1));
	}
	protected native static int pthread_rwlock_downgrade_np(@Ptr long pthread_rwlock_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlock_upgrade_np(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:331</i>
	 */
	public static int pthread_rwlock_upgrade_np(Pointer pthread_rwlock_tPtr1) {
		return pthread_rwlock_upgrade_np(Pointer.getPeer(pthread_rwlock_tPtr1));
	}
	protected native static int pthread_rwlock_upgrade_np(@Ptr long pthread_rwlock_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlock_tryupgrade_np(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:332</i>
	 */
	public static int pthread_rwlock_tryupgrade_np(Pointer pthread_rwlock_tPtr1) {
		return pthread_rwlock_tryupgrade_np(Pointer.getPeer(pthread_rwlock_tPtr1));
	}
	protected native static int pthread_rwlock_tryupgrade_np(@Ptr long pthread_rwlock_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlock_held_np(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:333</i>
	 */
	public static int pthread_rwlock_held_np(Pointer pthread_rwlock_tPtr1) {
		return pthread_rwlock_held_np(Pointer.getPeer(pthread_rwlock_tPtr1));
	}
	protected native static int pthread_rwlock_held_np(@Ptr long pthread_rwlock_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlock_rdheld_np(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:334</i>
	 */
	public static int pthread_rwlock_rdheld_np(Pointer pthread_rwlock_tPtr1) {
		return pthread_rwlock_rdheld_np(Pointer.getPeer(pthread_rwlock_tPtr1));
	}
	protected native static int pthread_rwlock_rdheld_np(@Ptr long pthread_rwlock_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlock_wrheld_np(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:335</i>
	 */
	public static int pthread_rwlock_wrheld_np(Pointer pthread_rwlock_tPtr1) {
		return pthread_rwlock_wrheld_np(Pointer.getPeer(pthread_rwlock_tPtr1));
	}
	protected native static int pthread_rwlock_wrheld_np(@Ptr long pthread_rwlock_tPtr1);
	/**
	 * SPI to set and get pthread name<br>
	 * Original signature : <code>int pthread_getname_np(pthread_t, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:338</i>
	 */
	public static int pthread_getname_np(PthreadLibrary.pthread_t pthread_t1, Pointer<Byte > charPtr1, @Ptr long size_t1) {
		return pthread_getname_np(Pointer.getPeer(pthread_t1), Pointer.getPeer(charPtr1), size_t1);
	}
	protected native static int pthread_getname_np(@Ptr long pthread_t1, @Ptr long charPtr1, @Ptr long size_t1);
	/**
	 * Original signature : <code>int pthread_setname_np(const char*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:339</i>
	 */
	public static int pthread_setname_np(Pointer<Byte > charPtr1) {
		return pthread_setname_np(Pointer.getPeer(charPtr1));
	}
	protected native static int pthread_setname_np(@Ptr long charPtr1);
	/**
	 * returns non-zero if the current thread is the main thread<br>
	 * Original signature : <code>int pthread_main_np()</code><br>
	 * <i>native declaration : /usr/include/pthread.h:341</i>
	 */
	public static native int pthread_main_np();
	/**
	 * return the mach thread bound to the pthread<br>
	 * Original signature : <code>mach_port_t pthread_mach_thread_np(pthread_t)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:344</i>
	 */
	public static int pthread_mach_thread_np(PthreadLibrary.pthread_t pthread_t1) {
		return pthread_mach_thread_np(Pointer.getPeer(pthread_t1));
	}
	protected native static int pthread_mach_thread_np(@Ptr long pthread_t1);
	/**
	 * Original signature : <code>size_t pthread_get_stacksize_np(pthread_t)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:345</i>
	 */
	@Ptr 
	public static long pthread_get_stacksize_np(PthreadLibrary.pthread_t pthread_t1) {
		return pthread_get_stacksize_np(Pointer.getPeer(pthread_t1));
	}
	@Ptr 
	protected native static long pthread_get_stacksize_np(@Ptr long pthread_t1);
	/**
	 * Original signature : <code>void* pthread_get_stackaddr_np(pthread_t)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:346</i>
	 */
	public static Pointer<? > pthread_get_stackaddr_np(PthreadLibrary.pthread_t pthread_t1) {
		return Pointer.pointerToAddress(pthread_get_stackaddr_np(Pointer.getPeer(pthread_t1)));
	}
	@Ptr 
	protected native static long pthread_get_stackaddr_np(@Ptr long pthread_t1);
	/**
	 * Like pthread_cond_signal(), but only wake up the specified pthread<br>
	 * Original signature : <code>int pthread_cond_signal_thread_np(pthread_cond_t*, pthread_t)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:349</i>
	 */
	public static int pthread_cond_signal_thread_np(Pointer pthread_cond_tPtr1, PthreadLibrary.pthread_t pthread_t1) {
		return pthread_cond_signal_thread_np(Pointer.getPeer(pthread_cond_tPtr1), Pointer.getPeer(pthread_t1));
	}
	protected native static int pthread_cond_signal_thread_np(@Ptr long pthread_cond_tPtr1, @Ptr long pthread_t1);
	/**
	 * Like pthread_cond_timedwait, but use a relative timeout<br>
	 * Original signature : <code>int pthread_cond_timedwait_relative_np(pthread_cond_t*, pthread_mutex_t*, timespec*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:352</i>
	 */
	public static int pthread_cond_timedwait_relative_np(Pointer pthread_cond_tPtr1, Pointer pthread_mutex_tPtr1, Pointer timespecPtr1) {
		return pthread_cond_timedwait_relative_np(Pointer.getPeer(pthread_cond_tPtr1), Pointer.getPeer(pthread_mutex_tPtr1), Pointer.getPeer(timespecPtr1));
	}
	protected native static int pthread_cond_timedwait_relative_np(@Ptr long pthread_cond_tPtr1, @Ptr long pthread_mutex_tPtr1, @Ptr long timespecPtr1);
	/**
	 * Like pthread_create(), but leaves the thread suspended<br>
	 * Original signature : <code>int pthread_create_suspended_np(pthread_t*, const pthread_attr_t*, pthread_create_suspended_np_arg1_callback*, void*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:357</i>
	 */
	public static int pthread_create_suspended_np(Pointer<PthreadLibrary.pthread_t > pthread_tPtr1, Pointer pthread_attr_tPtr1, Pointer<PthreadLibrary.pthread_create_suspended_np_arg1_callback > arg1, Pointer<? > voidPtr1) {
		return pthread_create_suspended_np(Pointer.getPeer(pthread_tPtr1), Pointer.getPeer(pthread_attr_tPtr1), Pointer.getPeer(arg1), Pointer.getPeer(voidPtr1));
	}
	protected native static int pthread_create_suspended_np(@Ptr long pthread_tPtr1, @Ptr long pthread_attr_tPtr1, @Ptr long arg1, @Ptr long voidPtr1);
	/**
	 * Original signature : <code>int pthread_kill(pthread_t, int)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:361</i>
	 */
	public static int pthread_kill(PthreadLibrary.pthread_t pthread_t1, int int1) {
		return pthread_kill(Pointer.getPeer(pthread_t1), int1);
	}
	protected native static int pthread_kill(@Ptr long pthread_t1, int int1);
	/**
	 * Original signature : <code>pthread_t pthread_from_mach_thread_np(mach_port_t)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:363</i>
	 */
	public static PthreadLibrary.pthread_t pthread_from_mach_thread_np(int mach_port_t1) {
		return new PthreadLibrary.pthread_t(pthread_from_mach_thread_np$2(mach_port_t1));
	}
	@Ptr 
	@Name("pthread_from_mach_thread_np") 
	protected native static long pthread_from_mach_thread_np$2(int mach_port_t1);
	/**
	 * Original signature : <code>int pthread_sigmask(int, const sigset_t*, sigset_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:365</i>
	 */
	public static int pthread_sigmask(int int1, Pointer<Integer > sigset_tPtr1, Pointer<Integer > sigset_tPtr2) {
		return pthread_sigmask(int1, Pointer.getPeer(sigset_tPtr1), Pointer.getPeer(sigset_tPtr2));
	}
	protected native static int pthread_sigmask(int int1, @Ptr long sigset_tPtr1, @Ptr long sigset_tPtr2);
	/**
	 * Original signature : <code>void pthread_yield_np()</code><br>
	 * <i>native declaration : /usr/include/pthread.h:366</i>
	 */
	public static native void pthread_yield_np();
	/** C type : extern char*[] */
	public Pointer<Pointer<Byte > > tzname() {
		try {
			return (Pointer<Pointer<Byte > >)BridJ.getNativeLibrary("pthread").getSymbolPointer("tzname").as(DefaultParameterizedType.paramType(Pointer.class, DefaultParameterizedType.paramType(Pointer.class, Byte.class))).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : extern char*[] */
	public PthreadLibrary tzname(Pointer<Pointer<Byte > > tzname) {
		try {
			{
				BridJ.getNativeLibrary("pthread").getSymbolPointer("tzname").as(DefaultParameterizedType.paramType(Pointer.class, DefaultParameterizedType.paramType(Pointer.class, Byte.class))).set(tzname);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int getdate_err() {
		try {
			return (int)BridJ.getNativeLibrary("pthread").getSymbolPointer("getdate_err").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public PthreadLibrary getdate_err(int getdate_err) {
		try {
			{
				BridJ.getNativeLibrary("pthread").getSymbolPointer("getdate_err").as(int.class).set(getdate_err);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int daylight() {
		try {
			return (int)BridJ.getNativeLibrary("pthread").getSymbolPointer("daylight").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public PthreadLibrary daylight(int daylight) {
		try {
			{
				BridJ.getNativeLibrary("pthread").getSymbolPointer("daylight").as(int.class).set(daylight);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public static class pthread_t extends TypedPointer {
		public pthread_t(long address) {
			super(address);
		}
		public pthread_t(Pointer address) {
			super(address);
		}
	};
}
